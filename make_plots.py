
import matplotlib.pyplot as plt


def population_vs_gen_and_fitness_plot():
    # Each list of tuples represents one run with a certain population size
    gen_and_score_tracker_100 = [(-14.88375, 1), (-14.05882, 2), (-13.85632, 3), (-12.89071, 4), (-12.83419, 5), (-12.71816, 6), (-12.04497, 7), (-11.92314, 8), (-11.35821, 9), (-11.35821, 10), (-11.30419, 11), (-11.2675, 12), (-11.19176, 13), (-10.26317, 14), (-10.26317, 15), (-10.26317, 16), (-9.98651, 17), (-9.98651, 18), (-9.84675, 19), (-9.83266, 20), (-9.83266, 21), (-9.78318, 22), (-9.74334, 23), (-9.52453, 24), (-9.52453, 25), (-9.51137, 26), (-9.48016, 27), (-9.48016, 28), (-9.43332, 29), (-9.41629, 30), (-9.38333, 31), (-9.0355, 32), (-9.0355, 33), (-9.00691, 34), (-9.00691, 35), (-9.00691, 36), (-8.99631, 37), (-8.95553, 38), (-8.95553, 39), (-8.72795, 40), (-8.55091, 41), (-8.48945, 42), (-8.34097, 43), (-8.34097, 44), (-8.32589, 45), (-7.96921, 46), (-7.96921, 47), (-7.66395, 48), (-7.66395, 49), (-7.61828, 50), (-7.45765, 51), (-7.45765, 52), (-7.45765, 53), (-7.42093, 54), (-7.42093, 55), (-7.42093, 56), (-7.42093, 57), (-7.07179, 58), (-7.07179, 59), (-7.07179, 60), (-7.04849, 61), (-7.04849, 62), (-7.04849, 63), (-7.04849, 64), (-7.04849, 65), (-7.04849, 66), (-7.04849, 67), (-7.04849, 68), (-6.96447, 69), (-6.96447, 70), (-6.96447, 71), (-6.96447, 72), (-6.96447, 73), (-6.96447, 74), (-6.9208, 75), (-6.79247, 76), (-6.79247, 77), (-6.40002, 78), (-6.40002, 79), (-6.17613, 80), (-6.17613, 81), (-6.17613, 82), (-5.72013, 83), (-5.68805, 84), (-5.68805, 85), (-5.68805, 86), (-5.65581, 87), (-5.37931, 88), (-5.37931, 89), (-4.41367, 90), (-2.20866, 91), (-0.65074, 92), (-0.65074, 93), (-0.59676, 94), (-0.59676, 95), (-0.59676, 96), (-0.59676, 97), (-0.59676, 98), (1.29699, 99), (1.29699, 100), (1.29699, 101), (1.29699, 102), (1.29699, 103), (1.29699, 104), (1.29699, 105), (1.29699, 106), (1.29699, 107), (1.29699, 108), (1.29699, 109), (1.29699, 110), (1.29699, 111), (1.31227, 112), (1.31227, 113), (1.31227, 114), (1.31227, 115), (1.31227, 116), (1.31227, 117), (1.31227, 118), (1.31227, 119), (1.31227, 120), (1.31227, 121), (1.31227, 122), (1.31227, 123), (1.31227, 124), (1.31227, 125), (1.31227, 126), (1.31227, 127)]
    gen_and_score_tracker_200 = [(-13.83455, 1), (-13.15448, 2), (-12.83237, 3), (-12.3352, 4), (-12.25535, 5), (-11.61378, 6), (-11.04753, 7), (-10.80186, 8), (-10.73272, 9), (-10.59406, 10), (-9.94969, 11), (-9.55605, 12), (-9.42218, 13), (-9.41575, 14), (-8.50059, 15), (-8.34838, 16), (-8.02238, 17), (-7.87658, 18), (-6.83211, 19), (-6.8044, 20), (-6.8044, 21), (-6.56548, 22), (-5.64069, 23), (-5.48321, 24), (-5.48321, 25), (-4.181, 26), (-4.181, 27), (-3.898, 28), (-3.86349, 29), (-3.81756, 30), (-3.05703, 31), (-2.96569, 32), (-2.36623, 33), (-2.27569, 34), (-2.04345, 35), (-2.04345, 36), (-2.04345, 37), (-2.04345, 38), (-1.97205, 39), (-1.96377, 40), (-1.90008, 41), (-1.25097, 42), (-1.189, 43), (-1.189, 44), (-0.54995, 45), (-0.54995, 46), (0.03252, 47), (0.03252, 48), (1.31227, 49), (1.31227, 50), (1.31227, 51), (1.31227, 52), (1.31227, 53), (1.31227, 54), (1.31227, 55), (1.31227, 56), (1.31227, 57), (1.31227, 58), (1.33726, 59)]
    gen_and_score_tracker_300 = [(-12.21441, 1), (-12.21441, 2), (-12.15416, 3), (-11.75852, 4), (-11.75852, 5), (-11.39551, 6), (-10.82756, 7), (-10.41239, 8), (-10.41239, 9), (-10.08045, 10), (-8.02525, 11), (-7.8105, 12), (-7.8105, 13), (-7.17309, 14), (-6.28346, 15), (-6.22781, 16), (-6.1867, 17), (-5.87869, 18), (-5.30419, 19), (-5.30419, 20), (-5.16801, 21), (-3.54984, 22), (-2.96891, 23), (-2.68623, 24), (-2.68623, 25), (-2.28319, 26), (-1.94062, 27), (-1.94062, 28), (-1.52606, 29), (-0.9338, 30), (-0.9338, 31), (0.36771, 32), (0.36771, 33), (0.36771, 34), (1.12461, 35), (1.12461, 36), (1.12461, 37), (1.17589, 38), (1.17589, 39), (1.2136, 40), (1.2136, 41), (1.27885, 42), (1.30784, 43), (1.30784, 44), (1.33726, 45)]
    gen_and_score_tracker_400 = [(-13.85392, 1), (-13.19091, 2), (-12.46054, 3), (-12.32344, 4), (-11.93459, 5), (-11.1814, 6), (-10.94549, 7), (-10.94549, 8), (-9.80524, 9), (-9.68458, 10), (-8.22497, 11), (-8.04434, 12), (-7.86811, 13), (-7.26258, 14), (-6.12121, 15), (-5.94174, 16), (-5.93777, 17), (-5.79887, 18), (-5.54811, 19), (-5.37716, 20), (-4.76662, 21), (-4.76662, 22), (-4.34004, 23), (-4.2409, 24), (-3.81031, 25), (-3.16695, 26), (-3.16695, 27), (-2.96962, 28), (-2.34321, 29), (-1.69768, 30), (-1.43433, 31), (-1.43433, 32), (-0.91466, 33), (0.35448, 34), (1.11232, 35), (1.11232, 36), (1.1846, 37), (1.1846, 38), (1.20899, 39), (1.20959, 40), (1.29699, 41), (1.29699, 42), (1.33726, 43)]
    gen_and_score_tracker_500 = [(-13.83436, 1), (-12.60214, 2), (-12.60214, 3), (-11.82148, 4), (-11.45304, 5), (-10.92409, 6), (-10.55993, 7), (-10.40551, 8), (-9.67361, 9), (-9.67361, 10), (-9.11738, 11), (-7.98832, 12), (-7.59781, 13), (-7.58464, 14), (-6.91319, 15), (-6.84721, 16), (-6.84721, 17), (-6.69912, 18), (-5.88714, 19), (-5.67706, 20), (-5.67706, 21), (-5.18974, 22), (-4.78166, 23), (-4.58931, 24), (-4.03347, 25), (-3.6507, 26), (-2.97397, 27), (-2.63944, 28), (-1.63625, 29), (-0.56544, 30), (-0.56544, 31), (-0.17741, 32), (-0.17741, 33), (-0.17741, 34), (0.16211, 35), (0.16211, 36), (1.10334, 37), (1.2337, 38), (1.2337, 39), (1.2337, 40), (1.2337, 41), (1.33726, 42)]

    # Unzip the data
    score_100, gen_100 = zip(*gen_and_score_tracker_100)
    score_200, gen_200 = zip(*gen_and_score_tracker_200)
    score_300, gen_300 = zip(*gen_and_score_tracker_300)
    score_400, gen_400 = zip(*gen_and_score_tracker_400)
    score_500, gen_500 = zip(*gen_and_score_tracker_500)

    plt.figure(figsize=(10, 5))

    # Plot the data
    plt.plot(gen_100, score_100, label='Pop Size 100')
    plt.plot(gen_200, score_200, label='Pop Size 200')
    plt.plot(gen_300, score_300, label='Pop Size 300')
    plt.plot(gen_400, score_400, label='Pop Size 400')
    plt.plot(gen_500, score_500, label='Pop Size 500')

    # Label the axes and create a legend
    plt.title('Population Size VS. Generation and Fitness Score', fontsize=16)
    plt.xlabel('Generation', fontsize=14)
    plt.ylabel('Best Fitness Score', fontsize=14)
    plt.legend(loc='lower right')
    plt.grid(True)

    # add gen annotation for clearer representation
    plt.annotate(f'{gen_100[-1]}', xy=(gen_100[-1], score_100[-1]), textcoords="offset points", xytext=(5, 5), ha='center')
    plt.annotate(f'{gen_200[-1]}', xy=(gen_200[-1], score_200[-1]), textcoords="offset points", xytext=(5, 5), ha='center')
    plt.annotate(f'{gen_300[-1]}', xy=(gen_300[-1], score_300[-1]), textcoords="offset points", xytext=(5, 5), ha='center')
    plt.annotate(f'{gen_400[-1]}', xy=(gen_400[-1], score_400[-1]), textcoords="offset points", xytext=(5, 5), ha='center')
    plt.annotate(f'{gen_500[-1]}', xy=(gen_500[-1], score_500[-1]), textcoords="offset points", xytext=(5, 5), ha='center')

    plt.show()


def population_size_vs_fitness_calls_bar_plot():
    # Define the population sizes and the corresponding number of fitness function calls
    population_sizes = [100, 200, 300, 400, 500]
    number_of_calls_for_100 = 12700
    number_of_calls_for_200 = 11800
    number_of_calls_for_300 = 13500
    number_of_calls_for_400 = 17200
    number_of_calls_for_500 = 21000
    fitness_calls = [number_of_calls_for_100, number_of_calls_for_200, number_of_calls_for_300, number_of_calls_for_400,
                     number_of_calls_for_500]

    # Create a bar plot
    plt.figure(figsize=(10, 6))
    bars = plt.bar(population_sizes, fitness_calls, width=40, color='blue', alpha=0.7)

    # Set the title and labels
    plt.title('Population Size VS. Number of Fitness Function Calls', fontsize=16)
    plt.xlabel('Population Size', fontsize=14)
    plt.ylabel('Number of Fitness Function Calls', fontsize=14)

    # Add annotation for each bar
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 3), ha='center', va='bottom')

    ax = plt.gca()  # gca stands for 'get current axis'
    ax.set_axisbelow(True)
    plt.grid(axis='y')
    plt.show()


if __name__ == '__main__':
    population_vs_gen_and_fitness_plot()
    population_size_vs_fitness_calls_bar_plot()

